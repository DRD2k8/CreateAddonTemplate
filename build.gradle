buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {url='https://repo.spongepowered.org/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
        classpath 'com.wynprice.cursemaven:CurseMaven:2.1.3'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id "com.wynprice.cursemaven" version "2.1.3"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.wynprice.cursemaven'
apply plugin: 'org.spongepowered.mixin'

group = 'com.kotakotik' // TODO: change this!
version = "${minecraft_version}-${mod_version}"
archivesBaseName = modid

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            jvmArgs "-Dmixin.env.disableRefMap=true"
            arg "-mixin.config=youraddon.mixins.json" // TODO: change this

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')

            jvmArgs "-Dmixin.env.disableRefMap=true"
            arg "-mixin.config=youraddon.mixins.json" // TODO: change this

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            jvmArgs "-Dmixin.env.disableRefMap=true"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "http://maven.tterrag.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:create-328085:${create_file_id}")

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : "You", // TODO: change this!
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "You", // TODO: change this!
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modid}.mixins.json" // TODO: change youraddon.mixins.json
        ])
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

artifacts {
    archives deobfJar
}

build.dependsOn deobfJar

jar.finalizedBy('reobfJar')
